'use client';

import { useState } from 'react';
import { useTranslation } from '@/lib/contexts/translation-context';
import { ChatInput } from '@/components/chat/chat-input';
import { ChatSuggestions } from '@/components/chat/chat-suggestions';
import { mockChatService } from '@/lib/mock-chat-service';
import type { ChatMessage } from '@/types/chat';

export default function ChatPage() {
  const { t } = useTranslation();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSendMessage = async (content: string) => {
    if (isLoading) return;

    try {
      setIsLoading(true);
      // Add user message
      const userMessage: ChatMessage = {
        id: `msg-${Date.now()}`,
        content,
        sender: 'user',
        timestamp: new Date().toISOString(),
      };
      setMessages(prev => [...prev, userMessage]);

      // Simulate expert response
      setTimeout(() => {
        const expertId = 'meditation-guru'; // Default expert for now
        const response = mockChatService.getExpertResponse(expertId);
        const expertMessage: ChatMessage = {
          id: `msg-${Date.now()}`,
          content: response,
          sender: 'expert',
          timestamp: new Date().toISOString(),
          expertId,
        };
        setMessages(prev => [...prev, expertMessage]);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to send message:', error);
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (question: string) => {
    handleSendMessage(question);
  };

  return (
    <div className="flex flex-col h-full">
      {messages.length === 0 ? (
        // Welcome Message with Suggestions
        <div className="flex-1 p-4 flex flex-col items-center justify-center">
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold mb-2">
              {t('chat.welcome.title', 'chat')}
            </h1>
            <p className="text-muted-foreground">
              {t('chat.welcome.description', 'chat')}
            </p>
          </div>
          <ChatSuggestions onSelectSuggestion={handleSuggestionClick} />
        </div>
      ) : (
        // Chat Messages
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => {
            const expert = message.expertId ? mockChatService.getExpertById(message.expertId) : undefined;
            return (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[70%] rounded-lg p-3 ${
                    message.sender === 'user'
                      ? 'bg-primary text-primary-foreground ml-12'
                      : 'bg-muted text-foreground mr-12'
                  }`}
                >
                  {message.sender === 'expert' && expert && (
                    <div className="font-medium text-sm mb-1">{expert.name}</div>
                  )}
                  <div className="text-sm">{message.content}</div>
                  <div className="text-xs mt-1 opacity-70">
                    {new Date(message.timestamp).toLocaleTimeString()}
                  </div>
                </div>
              </div>
            );
          })}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-muted text-foreground rounded-lg p-3">
                <span className="text-sm">{t('chat.loading', 'chat')}</span>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Chat Input */}
      <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
    </div>
  );
} 
} 